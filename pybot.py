import cv2
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from PIL import Image


bot = Bot(token="5208126996:AAGgbK5tyQ6UtNAvV6I56Asct6adKbGEPMY", parse_mode=types.ParseMode.HTML)  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

button_start1 = KeyboardButton('–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π üî≥') # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start2 = KeyboardButton('–ü–∏–∫—Å–µ–ª—å - –∞—Ä—Ç') # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
greet_kb.add(button_start1, button_start2)


@dp.message_handler(commands=['start'])  # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=greet_kb)


@dp.message_handler()  # –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∞–≤—ã
async def next_start(message: types.Message, state: FSMContext):
    if message.text == '–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π üî≥':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('wb')
    if message.text == '–ü–∏–∫—Å–µ–ª—å - –∞—Ä—Ç':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('pix')


@dp.message_handler(state='wb', content_types=['photo'])  # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∏–ª—è –ß-–ë
async def send_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('test.jpg')
    img_grey = cv2.imread('test.jpg', cv2.IMREAD_GRAYSCALE)
    color = 128
    img_binary = cv2.threshold(img_grey, color, 255, cv2.THRESH_BINARY)[1]
    cv2.imwrite('test_BaW.jpg', img_binary)
    photo = open('test_BaW.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    await state.finish()


@dp.message_handler(state='pix', content_types=['photo'])
async def send_photo_pix(message: types.Message, state: FSMContext):  # –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ
    await message.photo[-1].download('test.jpg')

    picture = Image.open('test.jpg')
    small_picture = picture.resize((128, 128), Image.BILINEAR)
    result_picture = small_picture.resize(picture.size, Image.NEAREST)
    result_picture.save('testPIX.jpg')
    photo = open('testPIX.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    await state.finish()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
