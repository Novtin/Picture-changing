import cv2
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from PIL import Image, ImageDraw
from os import remove
import numpy as np
from ASCII import ArtConverter

bot = Bot(token="5208126996:AAGgbK5tyQ6UtNAvV6I56Asct6adKbGEPMY", parse_mode=types.ParseMode.HTML)  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

button_start1 = KeyboardButton('–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π üî≥')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start2 = KeyboardButton('–ü–∏–∫—Å–µ–ª—å - –∞—Ä—Ç')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start3 = KeyboardButton('–ù–µ–≥–∞—Ç–∏–≤')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start4 = KeyboardButton('–û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start5 = KeyboardButton('–ú—É–ª—å—Ç—è—à–Ω—ã–π-max')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start6 = KeyboardButton('–ú—É–ª—å—Ç—è—à–Ω—ã–π-min')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
button_start7 = KeyboardButton('ASCII')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
greet_kb.add(button_start1, button_start2, button_start3).add(button_start4, button_start5, button_start6) \
    .add(button_start7)


@dp.message_handler(commands=['start'])  # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def command_start(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞—á–Ω—ë–º!")
    await start(message, state)


@dp.message_handler()  # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
async def start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=greet_kb)
    await state.set_state('enter')


@dp.message_handler(state='enter')  # –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∞–≤—ã
async def next_start(message: types.Message, state: FSMContext):
    if message.text == '–ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π üî≥':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('wb')
    elif message.text == '–ü–∏–∫—Å–µ–ª—å - –∞—Ä—Ç':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('pix')
    elif message.text == '–ù–µ–≥–∞—Ç–∏–≤':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('neg')
    elif message.text == '–û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('gray')
    elif message.text == '–ú—É–ª—å—Ç—è—à–Ω—ã–π-max':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('cartoon-max')
    elif message.text == '–ú—É–ª—å—Ç—è—à–Ω—ã–π-min':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('cartoon-min')
    elif message.text == 'ASCII':
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=ReplyKeyboardRemove())
        await state.set_state('ascii')


@dp.message_handler(state='wb', content_types=['photo'])  # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∏–ª—è –ß-–ë
async def send_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('static/images/test.jpg')
    img_grey = cv2.imread('static/images/test.jpg', cv2.IMREAD_GRAYSCALE)
    color = 128
    img_binary = cv2.threshold(img_grey, color, 255, cv2.THRESH_BINARY)[1]
    cv2.imwrite('test_BaW.jpg', img_binary)
    photo = open('test_BaW.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('test_BaW.jpg')
    await start(message, state)


@dp.message_handler(state='pix', content_types=['photo'])
async def send_photo_pix(message: types.Message, state: FSMContext):  # –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ
    await message.photo[-1].download('static/images/test.jpg')

    picture = Image.open('static/images/test.jpg')
    small_picture = picture.resize((128, 128), Image.BILINEAR)
    result_picture = small_picture.resize(picture.size, Image.NEAREST)
    result_picture.save('testPIX.jpg')
    photo = open('testPIX.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('testPIX.jpg')
    await start(message, state)


@dp.message_handler(state='neg', content_types=['photo'])
async def send_photo_negative(message: types.Message, state: FSMContext):  # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞ –Ω–∞ —Ñ–æ—Ç–æ
    await message.photo[-1].download('static/images/test.jpg')
    image = Image.open('static/images/test.jpg')
    draw = ImageDraw.Draw(image)  # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    width = image.size[0]  # –®–∏—Ä–∏–Ω–∞
    height = image.size[1]  # –í—ã—Å–æ—Ç–∞
    pix = image.load()  # –í—ã–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
    for i in range(width):
        for j in range(height):
            a = pix[i, j][0]
            b = pix[i, j][1]
            c = pix[i, j][2]
            draw.point((i, j), (255 - a, 255 - b, 255 - c))
    image.save('testNegative.jpg')
    del draw
    photo = open('testNegative.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('testNegative.jpg')
    await start(message, state)


@dp.message_handler(state='gray', content_types=['photo'])
async def send_photo_gray(message: types.Message, state: FSMContext):  # –°–µ—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ñ–æ—Ç–æ
    await message.photo[-1].download('static/images/test.jpg')
    image = Image.open('static/images/test.jpg')
    draw = ImageDraw.Draw(image)  # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    width = image.size[0]  # –®–∏—Ä–∏–Ω–∞
    height = image.size[1]  # –í—ã—Å–æ—Ç–∞
    pix = image.load()  # –í—ã–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
    for i in range(width):
        for j in range(height):
            a = pix[i, j][0]
            b = pix[i, j][1]
            c = pix[i, j][2]
            s = (a + b + c) // 3
            draw.point((i, j), (s, s, s))
    image.save('testGray.jpg')
    del draw
    photo = open('testGray.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('testGray.jpg')
    await start(message, state)


@dp.message_handler(state='cartoon-max', content_types=['photo'])
async def send_photo_cartoon_max(message: types.Message, state: FSMContext):  # –ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
    await message.photo[-1].download('static/images/test.jpg')
    img = cv2.imread('static/images/test.jpg')
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –ø–æ –ì–∞—É—Å—É
    img_gb = cv2.GaussianBlur(img, (7, 7), 0)
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–ª—é—Ä–∞
    img_mb = cv2.medianBlur(img_gb, 1)
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    img_bf = cv2.bilateralFilter(img_mb, 5, 80, 80)

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –õ–∞–ø–ª–∞—Å–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∞–µ–≤
    img_lp_im = cv2.Laplacian(img, cv2.CV_8U, ksize=5)
    img_lp_gb = cv2.Laplacian(img_gb, cv2.CV_8U, ksize=5)
    img_lp_mb = cv2.Laplacian(img_mb, cv2.CV_8U, ksize=5)
    img_lp_al = cv2.Laplacian(img_bf, cv2.CV_8U, ksize=5)

    # –ü—Ä–∏–º–µ–Ω–∏–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Otsu)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä
    img_lp_im_grey = cv2.cvtColor(img_lp_im, cv2.COLOR_BGR2GRAY)
    img_lp_gb_grey = cv2.cvtColor(img_lp_gb, cv2.COLOR_BGR2GRAY)
    img_lp_mb_grey = cv2.cvtColor(img_lp_mb, cv2.COLOR_BGR2GRAY)
    img_lp_al_grey = cv2.cvtColor(img_lp_al, cv2.COLOR_BGR2GRAY)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —à—É–º—ã
    blur_im = cv2.GaussianBlur(img_lp_im_grey, (5, 5), 0)
    blur_gb = cv2.GaussianBlur(img_lp_gb_grey, (5, 5), 0)
    blur_mb = cv2.GaussianBlur(img_lp_mb_grey, (5, 5), 0)
    blur_al = cv2.GaussianBlur(img_lp_al_grey, (5, 5), 0)

    # –î–æ–±–∞–≤–ª—è–µ–º (Otsu)
    _, tresh_im = cv2.threshold(blur_im, 245, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    _, tresh_gb = cv2.threshold(blur_gb, 245, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    _, tresh_mb = cv2.threshold(blur_mb, 245, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    _, tresh_al = cv2.threshold(blur_al, 245, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    inverted_Bilateral = cv2.subtract(255, tresh_al)
    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    div = 64
    img_bins = img // div * div + div // 2
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_reshaped = img.reshape((-1, 3))
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ np.float32
    img_reshaped = np.float32(img_reshaped)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è Kmeans
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    # –ü—Ä–∏–º–µ–Ω–∏–º Kmeans
    _, label, center = cv2.kmeans(img_reshaped, 8, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —á–µ—Ä–Ω–æ–≥–æ –≤ np.int8
    center = np.uint8(center)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–≤–µ—Ç
    inverted_Bilateral = cv2.cvtColor(inverted_Bilateral, cv2.COLOR_GRAY2RGB)
    # –û–±—ä–µ–¥–∏–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—è –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cartoon_Bilateral = cv2.bitwise_and(inverted_Bilateral, img_bins)
    cv2.imwrite('testCARTOONMAX.jpg', cartoon_Bilateral)
    photo = open('testCARTOONMAX.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('testCARTOONMAX.jpg')
    await start(message, state)


@dp.message_handler(state='cartoon-min', content_types=['photo'])
async def send_photo_cartoon_min(message: types.Message, state: FSMContext):  # –ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑
    await message.photo[-1].download('static/images/test.jpg')
    img = cv2.imread('static/images/test.jpg')
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.medianBlur(img, 5)
    img = cv2.GaussianBlur(img, (7, 7), 0)
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Å–∫–∏
    edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
    color = cv2.bilateralFilter(img, 9, 200, 200)
    # –ù–∞–ª–æ–∂–∂–µ–Ω–∏–µ –º—É–ª—å—Ç—è—à–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    cartoon = cv2.bitwise_and(color, color, mask=edges)
    cv2.imwrite('testCARTOONMIN.jpg', cartoon)
    photo = open('testCARTOONMIN.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    remove('static/images/test.jpg')
    remove('testCARTOONMIN.jpg')
    await start(message, state)


@dp.message_handler(state='ascii', content_types=['photo'])
async def send_photo_ascii(message: types.Message, state: FSMContext):  # ASCII —Å—Ç–∏–ª—å
    await message.photo[-1].download('static/images/test.jpg')
    img = ArtConverter()
    img.run()
    photo = open('static/images/test.jpg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    photo.close()
    del img
    remove('static/images/test.jpg')
    await start(message, state)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
